import telebot
from config import *
from logic import *
import os
import tempfile
from datetime import datetime

bot = telebot.TeleBot(TOKEN)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
AVAILABLE_COLORS = {
    'red': 'üî¥ –ö—Ä–∞—Å–Ω—ã–π',
    'blue': 'üîµ –°–∏–Ω–∏–π', 
    'green': 'üü¢ –ó–µ–ª–µ–Ω—ã–π',
    'yellow': 'üü° –ñ–µ–ª—Ç—ã–π',
    'purple': 'üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π',
    'orange': 'üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π',
    'pink': 'üå∏ –†–æ–∑–æ–≤—ã–π',
    'brown': 'üü§ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π',
    'black': '‚ö´ –ß–µ—Ä–Ω—ã–π',
    'white': '‚ö™ –ë–µ–ª—ã–π'
}

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.chat.id
    first_name = message.chat.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    welcome_text = f"""
üó∫Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!

–Ø - –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –≥–æ—Ä–æ–¥–æ–≤! üåç

‚ú® –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –≥–æ—Ä–æ–¥–∞
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Ö –Ω–∞ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–∞—Ö
‚Ä¢ –ò–∑–º–µ–Ω—è—Ç—å —Ü–≤–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏

üöÄ –ù–∞—á–Ω–∏—Ç–µ —Å —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥:
/remember_city London - –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥
/show_my_cities - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –≥–æ—Ä–æ–¥–∞
/map_detailed - —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
"""
    
    bot.send_message(user_id, welcome_text)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    manager.create_user_table()

@bot.message_handler(commands=['help'])
def handle_help(message):
    help_text = """
üó∫Ô∏è –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î:

üìç –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
/my_stats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üèôÔ∏è –†–ê–ë–û–¢–ê –° –ì–û–†–û–î–ê–ú–ò:
/remember_city <–≥–æ—Ä–æ–¥> - –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥
/forget_city <–≥–æ—Ä–æ–¥> - —É–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥
/show_my_cities - –º–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
/search_city <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞

üé® –í–ù–ï–®–ù–ò–ô –í–ò–î:
/set_color <–≥–æ—Ä–æ–¥> <—Ü–≤–µ—Ç> - –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞
/colors - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞

üóæ –¢–ò–ü–´ –ö–ê–†–¢:
/map_simple - –ø—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞
/map_detailed - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞
/map_physical - —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞

üìè –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:
/show_city <–≥–æ—Ä–æ–¥> - –ø–æ–∫–∞–∑–∞—Ç—å –æ–¥–∏–Ω –≥–æ—Ä–æ–¥
/distance <–≥–æ—Ä–æ–¥1> <–≥–æ—Ä–æ–¥2> - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ

üìù –ü–†–ò–ú–ï–†–´:
/remember_city London
/set_color London blue
/map_detailed
/forget_city Paris
/my_stats
"""
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['my_stats'])
def handle_my_stats(message):
    try:
        user_id = message.chat.id
        stats = manager.get_user_stats(user_id)
        cities_data = manager.get_cities_with_colors(user_id)
        
        if stats['total_cities'] == 0:
            bot.send_message(user_id, 
                "üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n\n"
                "üèôÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: 0\n\n"
                "üí° –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥:\n"
                "/remember_city London")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–õ–Ø {message.chat.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}:\n\n"
        stats_text += f"üèôÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {stats['total_cities']}\n"
        stats_text += f"üé® –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ü–≤–µ—Ç–æ–≤: {stats['unique_colors']}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–≤–µ—Ç–∞–º
        color_stats = {}
        for city, color in cities_data:
            color_stats[color] = color_stats.get(color, 0) + 1
        
        stats_text += "üé® –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¶–í–ï–¢–ê–ú:\n"
        for color, count in color_stats.items():
            color_name = AVAILABLE_COLORS.get(color, color)
            stats_text += f"‚Ä¢ {color_name}: {count} –≥–æ—Ä–æ–¥–æ–≤\n"
        
        bot.send_message(user_id, stats_text)
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@bot.message_handler(commands=['colors'])
def handle_colors(message):
    colors_text = "üé® –î–û–°–¢–£–ü–ù–´–ï –¶–í–ï–¢–ê –ú–ê–†–ö–ï–†–û–í:\n\n"
    for color_key, color_desc in AVAILABLE_COLORS.items():
        colors_text += f"{color_desc} - /set_color –≥–æ—Ä–æ–¥ {color_key}\n"
    
    colors_text += "\nüìù –ü–†–ò–ú–ï–†–´:\n"
    colors_text += "/set_color London blue\n"
    colors_text += "/set_color Paris red\n"
    colors_text += "/set_color Tokyo green"
    
    bot.send_message(message.chat.id, colors_text)

@bot.message_handler(commands=['set_color'])
def handle_set_color(message):
    try:
        parts = message.text.split()
        if len(parts) < 3:
            bot.send_message(message.chat.id, 
                "‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢\n\n"
                "üìù –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /set_color <–≥–æ—Ä–æ–¥> <—Ü–≤–µ—Ç>\n\n"
                "üîπ –ü—Ä–∏–º–µ—Ä—ã:\n"
                "/set_color London blue\n"
                "/set_color New York red\n\n"
                "üé® –¶–≤–µ—Ç–∞: /colors")
            return
        
        city_name = parts[1]
        color = parts[2].lower()
        
        if color not in AVAILABLE_COLORS:
            error_text = f"‚ùå –¶–í–ï–¢ '{color}' –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø\n\n"
            error_text += "üé® –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞:\n"
            for color_key, color_desc in AVAILABLE_COLORS.items():
                error_text += f"‚Ä¢ {color_key} - {color_desc}\n"
            bot.send_message(message.chat.id, error_text)
            return
            
        success = manager.set_marker_color(message.chat.id, city_name, color)
        if success:
            bot.send_message(message.chat.id, 
                f"‚úÖ –¶–í–ï–¢ –ò–ó–ú–ï–ù–ï–ù!\n\n"
                f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city_name}\n"
                f"üé® –¶–≤–µ—Ç: {AVAILABLE_COLORS[color]}")
        else:
            bot.send_message(message.chat.id, 
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç.\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≥–æ—Ä–æ–¥ '{city_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
                f"üí° –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥:\n"
                f"/remember_city {city_name}")
            
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['map_simple', 'map_detailed', 'map_physical'])
def handle_map_style(message):
    try:
        command = message.text.split()[0]
        style = command.replace('/map_', '')
        user_id = message.chat.id
        
        cities_data = manager.get_cities_with_colors(user_id)
        
        if not cities_data:
            bot.send_message(message.chat.id, 
                "‚ùå –£ –í–ê–° –ù–ï–¢ –°–û–•–†–ê–ù–ï–ù–ù–´–• –ì–û–†–û–î–û–í\n\n"
                "üí° –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥:\n"
                "/remember_city London\n"
                "/remember_city Paris\n"
                "/remember_city Tokyo")
            return
            
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_file:
            temp_path = temp_file.name
        
        bot.send_message(user_id, "üîÑ –°–æ–∑–¥–∞—é –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É...")
        result = manager.create_graph(temp_path, cities_data, style)
        
        if not result:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã")
            return
            
        style_names = {
            'simple': 'üó∫Ô∏è –ü–†–û–°–¢–ê–Ø –ö–ê–†–¢–ê',
            'detailed': 'üóæ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ö–ê–†–¢–ê', 
            'physical': '‚õ∞Ô∏è –§–ò–ó–ò–ß–ï–°–ö–ê–Ø –ö–ê–†–¢–ê'
        }
        
        with open(temp_path, 'rb') as photo:
            caption = f"{style_names.get(style, '–ö–ê–†–¢–ê')}\n"
            caption += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.chat.first_name or '–ê–Ω–æ–Ω–∏–º'}\n"
            caption += f"üèôÔ∏è –ì–æ—Ä–æ–¥–æ–≤: {len(cities_data)}\n"
            caption += f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            
            bot.send_photo(user_id, photo, caption=caption)
        
        os.unlink(temp_path)
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['remember_city'])
def handle_remember_city(message):
    try:
        parts = message.text.split()
        if len(parts) < 2:
            bot.send_message(message.chat.id, 
                "‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢\n\n"
                "üìù –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /remember_city <–≥–æ—Ä–æ–¥>\n\n"
                "üîπ –ü—Ä–∏–º–µ—Ä—ã:\n"
                "/remember_city London\n"
                "/remember_city New York\n"
                "/remember_city Tokyo")
            return
        
        city_name = ' '.join(parts[1:])
        user_id = message.chat.id
        
        success, found_city = manager.add_city(user_id, city_name)
        
        if success == 1:
            bot.send_message(user_id, 
                f"‚úÖ –ì–û–†–û–î –î–û–ë–ê–í–õ–ï–ù!\n\n"
                f"üèôÔ∏è –ì–æ—Ä–æ–¥: {found_city or city_name}\n"
                f"üé® –¶–≤–µ—Ç: üî¥ –ö—Ä–∞—Å–Ω—ã–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n\n"
                f"üí° –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç:\n"
                f"/set_color {found_city or city_name} <—Ü–≤–µ—Ç>\n\n"
                f"üó∫Ô∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É:\n"
                f"/map_detailed")
        else:
            similar_cities = manager.find_city_variants(city_name)
            if similar_cities:
                cities_list = "\n".join([f"‚Ä¢ {city}" for city in similar_cities[:5]])
                bot.send_message(user_id, 
                    f"‚ùå –ì–û–†–û–î –ù–ï –ù–ê–ô–î–ï–ù\n\n"
                    f"üîç –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n{cities_list}\n\n"
                    f"üí° –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º")
            else:
                bot.send_message(user_id, 
                    f"‚ùå –ì–û–†–û–î '{city_name}' –ù–ï –ù–ê–ô–î–ï–ù\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ\n"
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                    f"‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ –≥–æ—Ä–æ–¥–∞:\n"
                    f"/search_city {city_name}")
            
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['forget_city'])
def handle_forget_city(message):
    try:
        parts = message.text.split()
        if len(parts) < 2:
            bot.send_message(message.chat.id, 
                "‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢\n\n"
                "üìù –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /forget_city <–≥–æ—Ä–æ–¥>\n\n"
                "üîπ –ü—Ä–∏–º–µ—Ä:\n"
                "/forget_city London")
            return
        
        city_name = ' '.join(parts[1:])
        user_id = message.chat.id
        
        success = manager.remove_city(user_id, city_name)
        
        if success:
            bot.send_message(user_id, 
                f"‚úÖ –ì–û–†–û–î –£–î–ê–õ–ï–ù!\n\n"
                f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city_name}\n"
                f"üí° –¢–µ–∫—É—â–∏–µ –≥–æ—Ä–æ–¥–∞: /show_my_cities")
        else:
            bot.send_message(user_id, 
                f"‚ùå –ì–û–†–û–î –ù–ï –ù–ê–ô–î–ï–ù\n\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≥–æ—Ä–æ–¥ '{city_name}' –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
                f"üí° –í–∞—à–∏ –≥–æ—Ä–æ–¥–∞: /show_my_cities")
            
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['show_my_cities'])
def handle_show_my_cities(message):
    try:
        user_id = message.chat.id
        cities_data = manager.get_cities_with_colors(user_id)
        
        if not cities_data:
            bot.send_message(user_id, 
                "‚ùå –£ –í–ê–° –ù–ï–¢ –°–û–•–†–ê–ù–ï–ù–ù–´–• –ì–û–†–û–î–û–í\n\n"
                "üí° –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥:\n"
                "/remember_city London")
            return
            
        cities_list = "\n".join([f"üèôÔ∏è {city} - {AVAILABLE_COLORS.get(color, color)}" 
                               for city, color in cities_data])
        
        bot.send_message(user_id, 
            f"üó∫Ô∏è –í–ê–®–ò –°–û–•–†–ê–ù–ï–ù–ù–´–ï –ì–û–†–û–î–ê:\n\n{cities_list}\n\n"
            f"üí° –ö–û–ú–ê–ù–î–´:\n"
            f"/map_detailed - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ\n"
            f"/forget_city <–≥–æ—Ä–æ–¥> - —É–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥\n"
            f"/my_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['show_city'])
def handle_show_city(message):
    try:
        parts = message.text.split()
        if len(parts) < 2:
            bot.send_message(message.chat.id, 
                "‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢\n\n"
                "üìù –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /show_city <–≥–æ—Ä–æ–¥>\n\n"
                "üîπ –ü—Ä–∏–º–µ—Ä:\n"
                "/show_city London")
            return
        
        city_name = ' '.join(parts[1:])
        user_id = message.chat.id
        
        coords = manager.get_coordinates(city_name)
        if not coords:
            bot.send_message(user_id, 
                f"‚ùå –ì–û–†–û–î –ù–ï –ù–ê–ô–î–ï–ù\n\n"
                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"/search_city {city_name}")
            return
            
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_file:
            temp_path = temp_file.name
        
        bot.send_message(user_id, "üîÑ –°–æ–∑–¥–∞—é –∫–∞—Ä—Ç—É...")
        result = manager.create_graph(temp_path, [city_name], 'detailed')
        
        if result:
            with open(temp_path, 'rb') as photo:
                bot.send_photo(user_id, photo, 
                              caption=f"üèôÔ∏è {city_name}\n"
                                      f"üìç –®–∏—Ä–æ—Ç–∞: {coords[0]:.4f}¬∞\n"
                                      f"üìç –î–æ–ª–≥–æ—Ç–∞: {coords[1]:.4f}¬∞\n\n"
                                      f"üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ—Ä–æ–¥:\n"
                                      f"/remember_city {city_name}")
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã")
        
        os.unlink(temp_path)
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['search_city'])
def handle_search_city(message):
    try:
        parts = message.text.split()
        if len(parts) < 2:
            bot.send_message(message.chat.id, 
                "‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢\n\n"
                "üìù –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /search_city <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n\n"
                "üîπ –ü—Ä–∏–º–µ—Ä—ã:\n"
                "/search_city Mos\n"
                "/search_city New\n"
                "/search_city York")
            return
        
        search_term = ' '.join(parts[1:])
        similar_cities = manager.find_city_variants(search_term)
        
        if similar_cities:
            cities_list = "\n".join([f"‚Ä¢ {city}" for city in similar_cities[:10]])
            bot.send_message(message.chat.id, 
                f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:\n\n{cities_list}\n\n"
                f"üí° –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥:\n"
                f"/remember_city <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        else:
            bot.send_message(message.chat.id, 
                f"‚ùå –ù–ò–ß–ï–ì–û –ù–ï –ù–ê–ô–î–ï–ù–û\n\n"
                f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n"
                f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.")
            
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['distance'])
def handle_distance(message):
    try:
        parts = message.text.split()
        if len(parts) < 3:
            bot.send_message(message.chat.id, 
                "‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢\n\n"
                "üìù –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /distance <–≥–æ—Ä–æ–¥1> <–≥–æ—Ä–æ–¥2>\n\n"
                "üîπ –ü—Ä–∏–º–µ—Ä:\n"
                "/distance London Paris")
            return
            
        city1, city2 = parts[1], parts[2]
        user_id = message.chat.id
        
        coords1 = manager.get_coordinates(city1)
        coords2 = manager.get_coordinates(city2)
        
        if not coords1 or not coords2:
            missing = []
            if not coords1: missing.append(city1)
            if not coords2: missing.append(city2)
            bot.send_message(user_id, 
                f"‚ùå –ì–û–†–û–î–ê –ù–ï –ù–ê–ô–î–ï–ù–´: {', '.join(missing)}\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /search_city <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
            return
        
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_file:
            temp_path = temp_file.name
        
        bot.send_message(user_id, "üîÑ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ...")
        if manager.draw_distance(city1, city2, temp_path):
            with open(temp_path, 'rb') as photo:
                bot.send_photo(user_id, photo, 
                              caption=f"üìè –†–ê–°–°–¢–û–Ø–ù–ò–ï\n\n"
                                      f"üèôÔ∏è {city1} ‚Üí {city2}\n"
                                      f"üìç –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º")
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã")
        
        os.unlink(temp_path)
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    bot.send_message(message.chat.id,
        "‚ùå –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –ö–û–ú–ê–ù–î–ê\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
        "üîπ –ò–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å /start")

if __name__ == "__main__":
    print("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    print("üóÉÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    manager = DB_Map(DATABASE)
    manager.create_user_table()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
    print("üë• –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é polling...")
    bot.polling()